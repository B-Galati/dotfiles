#!/usr/bin/env bash

# ############################################## #
#                     FONCTIONS                  #
# ############################################## #

function cheatsh {
    curl "https://cheat.sh/${1}"
}

# Taken from Symfony installer
function output {
    style_start=""
    style_end=""
    if [ "${2:-}" != "" ]; then
        case $2 in
            "success")
                style_start="\033[0;32m"
                style_end="\033[0m"
                ;;
            "error")
                style_start="\033[31;31m"
                style_end="\033[0m"
                ;;
            "info"|"warning")
                style_start="\033[33m"
                style_end="\033[39m"
                ;;
            "heading")
                style_start="\033[1;33m"
                style_end="\033[22;39m"
                ;;
        esac
    fi

    builtin echo -e "${style_start}${1}${style_end}"
}

function output_success {
    output "${1}" 'success'
}
function output_heading {
    output "${1}" 'heading'
}
function output_info {
    output "${1}" 'info'
}
function output_warning {
    output "${1}" 'warning'
}
function output_error {
    output "${1}" 'error'
}

function sf
{
    if [ -f bin/console ]; then
        bin/console "$@"
    elif [ -f app/console ]; then
        app/console "$@"
    else
        echo "No console found"
    fi
}

# colored man pages
man() {
        env \
                LESS_TERMCAP_mb=$(printf "\e[1;31m") \
                LESS_TERMCAP_md=$(printf "\e[1;31m") \
                LESS_TERMCAP_me=$(printf "\e[0m") \
                LESS_TERMCAP_se=$(printf "\e[0m") \
                LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
                LESS_TERMCAP_ue=$(printf "\e[0m") \
                LESS_TERMCAP_us=$(printf "\e[1;32m") \
                        man "$@"
}

# Extraire automatiquement une archive
function extract()
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1     ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1      ;;
            *.rar)       unrar x $1      ;;
            *.gz)        gunzip $1       ;;
            *.tar)       tar xvf $1      ;;
            *.tbz2)      tar xvjf $1     ;;
            *.tgz)       tar xvzf $1     ;;
            *.zip)       unzip $1        ;;
            *.Z)         uncompress $1   ;;
            *.7z)        7z x $1         ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# lecture colorée de logs
logview()
{
        ccze -A < $1 | less -R
}

# lecture colorée de logs en directfunction logview()
logtail()
{
        tail -f $1 | ccze
}

# source https://gist.github.com/nl5887/a511f172d3fb3cd0e42d
transfer() {
    # check arguments
    if [ $# -eq 0 ];
    then
        echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi

    # get temporarily filename, output is written to this file show progress can be showed
    tmpfile=$( mktemp -t transferXXX )

    # upload stdin or file
    file=$1

    if tty -s;
    then
        basefile=$(basename "$file" | sed -e 's/[^a-zA-Z0-9._-]/-/g')

        if [ ! -e $file ];
        then
            echo "File $file doesn't exists."
            return 1
        fi

        if [ -d $file ];
        then
            # zip directory and transfer
            zipfile=$( mktemp -t transferXXX.zip )
            cd $(dirname $file) && zip -r -q - $(basename $file) >> $zipfile
            curl --progress-bar --upload-file "$zipfile" "https://transfer.sh/$basefile.zip" >> $tmpfile
            rm -f $zipfile
        else
            # transfer file
            curl --progress-bar --upload-file "$file" "https://transfer.sh/$basefile" >> $tmpfile
        fi
    else
        # transfer pipe
        curl --progress-bar --upload-file "-" "https://transfer.sh/$file" >> $tmpfile
    fi

    # cat output link
    cat $tmpfile

    # cleanup
    rm -f $tmpfile
}

switch-php() {
  sudo update-alternatives --set php /usr/bin/php$1
}

# Keep header line while doing a grep
# Usage: ps aux | hgrep ssh
hgrep() {
    echo -n "\033[32m"; head -1; echo -n "\033[39m"; grep -i "$*"
}

ai_code_review() {
    if [ -z "$1" ]; then
        output_error "Branch name is required"
        return 1
    fi

    branch="$1"
    base_branch="${2:-main}"  # Use provided base branch or default to main

    if ! git fetch origin "$branch" "$base_branch"; then
        output_error "Failed to fetch from origin."
        return 2
    fi

    base_commit=$(git merge-base "origin/$base_branch" "origin/${branch}")
    if [ -z "$base_commit" ]; then
        output_error "Failed to determine merge base between ${base_branch} and ${branch}."
        return 3
    fi

    git diff $base_commit..origin/${branch} | fabric --stream -p c_code_review
}

ai_summary() {
    branch="HEAD"
    base_branch="${1:-main}"  # Use provided base branch or default to main

    if ! git fetch origin "$branch" "$base_branch"; then
        output_error "Failed to fetch from origin."
        return 2
    fi

    base_commit=$(git merge-base "origin/$base_branch" "origin/${branch}")
    if [ -z "$base_commit" ]; then
        output_error "Failed to determine merge base between ${base_branch} and ${branch}."
        return 3
    fi

    git diff $base_commit..origin/${branch} | fabric --stream -p c_merge_request_summary
}

ai_commit() {
    # Check if we have staged changes
    if git diff --cached --quiet; then
        output_error "No staged changes found. Use 'git add' to stage your changes first."
        return 1
    fi

    # Check if fabric is installed
    if ! command -v fabric &> /dev/null; then
        output_error "fabric is not installed or not in PATH"
        return 2
    fi

    output_info "Generating commit message from staged changes..."

    # Generate commit message with AI
    commit_msg="$(echo "Branch: $(git rev-parse --abbrev-ref HEAD)
    Files changed: $(git diff --cached --name-only | tr '\n' ' ')
    $(git diff --cached -w)" | fabric -p c_git_commit)"

    # Create a temporary file with the generated message
    temp_file=$(mktemp)
    echo "$commit_msg" > "$temp_file"

    # Open the message in the default editor
    ${EDITOR:-vi} "$temp_file"

    # Read the edited message
    edited_msg=$(cat "$temp_file")
    rm -f "$temp_file"

    # Skip if the user provided an empty message
    if [[ -z "$edited_msg" || "$edited_msg" =~ ^[[:space:]]*$ ]]; then
        output_warning "Empty commit message. Commit aborted."
        return 3
    fi

    output
    echo "$edited_msg" | git commit --file=-
    output_success "Commit completed!"
}

# Cancel all running pipelines for a given user
glab_cancel_user_pipelines() {
    local auto_confirm=false

    # parse options (-y/--yes)
    while [[ "$1" == -* ]]; do
        case "$1" in
            -y|--yes)
                auto_confirm=true
                shift
                ;;
            *)
                output_error "Unknown option: $1"
                return 1
                ;;
        esac
    done

    local username="$1"

    # Check if username is provided
    if [ -z "$username" ]; then
        output_error "Username is required. Usage: cancel_user_pipelines [-y|--yes] <username>"
        return 1
    fi

    # Check if required tools are available
    if ! command -v glab &> /dev/null; then
        output_error "glab is not installed or not in PATH"
        return 2
    fi

    if ! command -v jq &> /dev/null; then
        output_error "jq is not installed or not in PATH"
        return 3
    fi

    output_info "Fetching pipelines for user: $username"

    # Get all pipelines for the user (using a high per-page limit to get all)
    local pipelines_json
    pipelines_json=$(glab ci list --username "$username" --per-page 10 --output json 2>/dev/null)

    if [ $? -ne 0 ] || [ -z "$pipelines_json" ]; then
        output_error "Failed to fetch pipelines for user: $username"
        return 4
    fi

    # Filter pipelines with statuses that should be canceled and extract id, status and ref
    local pipelines
    pipelines=$(echo "$pipelines_json" | jq -r '.[] | select(.status == "running" or .status == "pending" or .status == "created" or .status == "waiting_for_resource" or .status == "preparing" or .status == "scheduled") | select(.ref != "main") | "\(.id)\t\(.status)\t\(.ref)"')

    if [ -z "$pipelines" ]; then
        output_success "No matching pipelines found for user: $username"
        return 0
    fi

    # Count the pipelines
    local pipeline_count
    pipeline_count=$(printf "%s\n" "$pipelines" | wc -l | tr -d ' ')

    output_warning "Found $pipeline_count pipeline(s) for user: $username that will be cancelled"

    # Display list of pipelines with status and ref
    output_info "List of pipelines:"
    while IFS=$'\t' read -r pid pstatus pref; do
        output_info "  ID: $pid  status: $pstatus  ref: $pref"
    done <<< "$pipelines"

    # Confirm unless auto_confirm was passed
    if [ "$auto_confirm" != "true" ]; then
        output "Do you want to cancel all these pipelines? (y/N): "
        read -r REPLY
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            output_info "Operation cancelled by user"
            return 0
        fi
    else
        output_info "Auto-confirm enabled (-y/--yes): proceeding to cancel pipelines"
    fi

    # Cancel each pipeline (use here-string to keep counters in the current shell)
    local success_count=0
    local error_count=0

    while IFS=$'\t' read -r pipeline_id status_test ref; do
        output_info "Cancelling pipeline ID: $pipeline_id (status: $status_test, ref: $ref)"
        if glab ci cancel pipeline "$pipeline_id" &> /dev/null; then
            output_success "  ✓ Pipeline $pipeline_id cancelled successfully"
            success_count=$((success_count + 1))
        else
            output_error "  ✗ Failed to cancel pipeline $pipeline_id"
            error_count=$((error_count + 1))
        fi
    done <<< "$pipelines"

    if [ $error_count -eq 0 ]; then
        output_success "All $pipeline_count pipeline(s) cancelled successfully!"
    else
        output_warning "Cancelled $success_count pipeline(s), failed to cancel $error_count pipeline(s)"
    fi
}
